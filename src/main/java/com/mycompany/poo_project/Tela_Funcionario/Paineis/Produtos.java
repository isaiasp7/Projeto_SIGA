/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.poo_project.Tela_Funcionario.Paineis;

import DAO.ProdutoDAO;
import Model.Produto;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cliente
 */
public class Produtos extends javax.swing.JPanel {

    /**
     * Creates new form Produtos
     */
    public Produtos() {
        initComponents();
        
        DefaultTableModel modelo = new DefaultTableModel(
            new Object[][] {},
            new String[] { "Seleção", "ID", "Nome", "Quantidade", "Preço" }
        ) {
            Class[] types = new Class[]{
                Boolean.class, Integer.class, String.class, Integer.class, Double.class
            };
            boolean[] canEdit = new boolean[]{
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        tabelaProdutos.setModel(modelo); 
        carregarDados();
    }
    
    private void carregarDados() {
        //Temporario
        /*
        ProdutoDAO dao = new ProdutoDAO();

        List<Produto> produtos = dao.readProduto(); 

        DefaultTableModel modelo = (DefaultTableModel) tabelaProdutos.getModel();
        modelo.setRowCount(0);

        for (Produto p : produtos) {
            Object[] linha = new Object[] {
                false,
                p.getId(),
                p.getNome(),
                p.getQuantDisponivel(),
                p.getValor()
            };
            modelo.addRow(linha);
        }
        */
        //Codigo real: 
        
        ProdutoDAO dao = new ProdutoDAO();
        int idFornecedor = FornecedorLogin.getId(); // pega o id do fornecedor logado

        List<Produto> produtos = dao.getProdutosPorFornecedor(idFornecedor);

        DefaultTableModel modelo = (DefaultTableModel) tabelaProdutos.getModel();

        modelo.setRowCount(0);

        for (Produto p : produtos) {
            Object[] linha = new Object[]{
                false,           
                p.getId(),           
                p.getNome(),         
                p.getQuantDisponivel(),
                p.getValor()         
            };
            modelo.addRow(linha);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutos = new javax.swing.JTable();
        btnCriar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        tabelaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Seleção", "ID", "Nome", "Quantidade", "Preço"
            }
        ));
        jScrollPane1.setViewportView(tabelaProdutos);

        btnCriar.setText("Criar");
        btnCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCriar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluir))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCriar)
                    .addComponent(btnEditar)
                    .addComponent(btnExcluir))
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarActionPerformed
        // TODO add your handling code here:
        CriarProduto tela = new CriarProduto(null, true); 
        tela.setVisible(true); 
        carregarDados(); 
    }//GEN-LAST:event_btnCriarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaProdutos.getSelectedRow();
        if (linhaSelecionada != -1) {
            int id = (int) tabelaProdutos.getValueAt(linhaSelecionada, 0);
            String nome = (String) tabelaProdutos.getValueAt(linhaSelecionada, 1);
            int quantidade = (int) tabelaProdutos.getValueAt(linhaSelecionada, 2);
            double preco = (double) tabelaProdutos.getValueAt(linhaSelecionada, 3);

            EditarProduto editarDialog = new EditarProduto(null, true, id, nome, quantidade, preco);
            editarDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um produto para editar.");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tabelaProdutos.getModel();
        ProdutoDAO dao = new ProdutoDAO();

        List<Integer> idsParaExcluir = new ArrayList<>();

        for (int i = 0; i < modelo.getRowCount(); i++) {
            Boolean selecionado = (Boolean) modelo.getValueAt(i, 0);
            if (selecionado != null && selecionado) {
                int idProduto = (int) modelo.getValueAt(i, 1);
                idsParaExcluir.add(idProduto);
            }
        }

        if (idsParaExcluir.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um produto para excluir.");
            return;
        }

        int confirmar = JOptionPane.showConfirmDialog(this, 
            "Tem certeza que deseja excluir os produtos selecionados?", 
            "Confirmação", JOptionPane.YES_NO_OPTION);

        if (confirmar == JOptionPane.YES_OPTION) {
            boolean sucesso = true;
            for (Integer id : idsParaExcluir) {
                boolean excluiu = dao.deleteProduto(id);
                if (!excluiu) {
                    sucesso = false;
                }
            }

            if (sucesso) {
                JOptionPane.showMessageDialog(this, "Produtos excluídos com sucesso.");
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir alguns produtos.");
            }

            carregarDados(); 

        } 

    }//GEN-LAST:event_btnExcluirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaProdutos;
    // End of variables declaration//GEN-END:variables
}
